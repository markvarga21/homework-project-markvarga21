package hu.unideb.inf.homeworkproject.model;

import javafx.scene.Node;

/**
 * A class representing a {@code Node}, which also stores the indexes,
 * because by default we cannot extract them directly
 * from a {@code Node}.
 */
public class CircleNode {
    /**
     * {@code Node} representing the node part of a {@code CircleNode}.
     */
    private final Node node;

    /**
     * {@code row} representing the row of a {@code CircleNode}.
     */
    private final int row;

    /**
     * {@code column} representing the column of a {@code CircleNode}.
     */
    private final int column;

    /**
     * CircleNode constructor, accepting three parameters.
     * @param constrNode the {@code Node} to which we want to add the indexes.
     * @param constrRow the constrRow of the {@code Node}
     * @param constrColumn the constrColumn of the {@code Node}
     */
    public CircleNode(final Node constrNode,
                      final int constrRow,
                      final int constrColumn) {
        this.node = constrNode;
        this.row = constrRow;
        this.column = constrColumn;
    }

    /**
     * @return the {@code Node} field of a {@code CircleClass} instance.
     */
    public Node getNode() {
        return node;
    }

    /**
     * @return the row field of a {@code CircleClass} instance.
     */
    public int getRow() {
        return row;
    }

    /**
     * @return the column field of a {@code CircleClass} instance.
     */
    public int getColumn() {
        return column;
    }

    /**
     * Firstly if checks whether the object we want to check the equality
     * is an instance of {@code CircleNode} or not, after this it checks
     * if the two {@code CircleNode} are equal,
     * using their {@code Node} fields.
     * @param obj an object representing another {@code Node}.
     * @return {@code true} if their {@code Node} fields are equals,
     * else returns {@code false}.
     */
    @Override
    public boolean equals(final Object obj) {
        if (obj instanceof CircleNode objCircleNode) {
            return getNode().equals(objCircleNode.getNode());
        }
        return false;
    }

    /**
     * Overrides the {@code hashCode()} method,
     * which invokes the super-classes {@code hashCode()} method.
     * @return an {@code int} representing a hash code
     * generated by the Object superclass.
     */
    @Override
    public int hashCode() {
        int nodeHash = this.node.hashCode();
        int rowHash = Integer.hashCode(this.row);
        int columnHash = Integer.hashCode(this.column);

        return nodeHash + rowHash + columnHash;
    }
}
